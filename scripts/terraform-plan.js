const axios = require('axios');

const realms = ['onestopauth', 'onestopauth-basic', 'onestopauth-both', 'onestopauth-business'];
const modules = ['keycloak_dev', 'keycloak_test', 'keycloak_prod'];
const TF_ADDITIONS_ALLOWED = 6;
const TF_DELETIONS_ALLOWED = 6;
const TF_UPDATES_ALLOWED = 6;
const FILE_CHANGES_ALLOWED = 3;

const isAllowedChanges = ({ count, limit, message } = {}) => {
  if (count > limit) {
    console.error(message);
    return false;
  }

  return true;
};

const isAllowedToMerge = (data) => {
  const { planDetails, planSuccess } = data;
  if (!planSuccess) throw new Error('terraform plan failed');

  const { changedFiles, tfAdditions, tfUpdates, tfDeletions } = planDetails;

  const checks = [
    { count: changedFiles, limit: FILE_CHANGES_ALLOWED, message: 'too many files changed' },
    { count: tfAdditions, limit: TF_ADDITIONS_ALLOWED, message: 'too many terraform resoures added' },
    { count: tfUpdates, limit: TF_UPDATES_ALLOWED, message: 'too many terraform resoures updated' },
    { count: tfDeletions, limit: TF_DELETIONS_ALLOWED, message: 'too many terraform resoures deleted' },
  ];

  return checks.every(isAllowedChanges);
};

module.exports = async ({ github, context }) => {
  const {
    payload: { pull_request, repository },
  } = context;
  const { changed_files: changedFiles, additions: prAdditions, deletions: prDeletions } = pull_request;
  const { PLAN, API_URL, PR_NUMBER, PLAN_OUTCOME, AUTHORIZATION, PR_BRANCH } = process.env;
  const isAutoGenerated = PR_BRANCH.startsWith('request/');
  console.log(PR_BRANCH, isAutoGenerated);
  if (!isAutoGenerated) return;
  try {
    console.log(API_URL, PLAN_OUTCOME, PR_NUMBER);

    const moduleMatchRegex = /# module.(.*?\n)/g;
    const resourceStrings = PLAN.match(moduleMatchRegex);
    const resources = [];

    resourceStrings &&
      resourceStrings.forEach((resource) => {
        const realm = realms.filter((realm) => resource.includes(`.${realm}.`));
        if (realm.length > 1) throw new Error('Matched multiple realms');

        const module = modules.filter((module) => resource.includes(`.${module}.`));
        if (module.length > 1) throw new Error('Matched multiple modules');

        const client = resource.match(/module.client_(.*?)(\.)/) ? resource.match(/module.client_(.*?)(\.)/)[1] : 0;
        const action = resource.match(/will be (.*?)(\n)/) ? resource.match(/will be (.*?)(\n)/)[1] : 0;

        const parsedResource = { module: module[0], client, realm: realm[0], action };
        resources.push(parsedResource);
      });

    const tfAdditions = PLAN.match(/Plan: (\d+) to add/) ? PLAN.match(/Plan: (\d+) to add/)[1] : 0;
    const tfUpdates = PLAN.match(/add, (\d+) to change/) ? PLAN.match(/add, (\d+) to change/)[1] : 0;
    const tfDeletions = PLAN.match(/change, (\d+) to destroy/) ? PLAN.match(/change, (\d+) to destroy/)[1] : 0;

    const planDetails = {
      changedFiles,
      prAdditions,
      prDeletions,
      resources,
      tfAdditions,
      tfUpdates,
      tfDeletions,
    };

    const data = {
      prNumber: PR_NUMBER,
      planSuccess: PLAN_OUTCOME !== 'failure',
      planDetails,
      repoOwner: repository.owner.login,
      repoName: repository.name,
    };

    data.isAllowedToMerge = isAllowedToMerge(data);

    console.log('sending data,', JSON.stringify(data));
    await axios.put(`${API_URL}?status=plan`, data, { headers: { Authorization: AUTHORIZATION } });
  } catch (error) {
    await axios.put(
      `${API_URL}?status=plan`,
      { prNumber: PR_NUMBER, planSuccess: false, planDetails: { error } },
      { headers: { Authorization: AUTHORIZATION } }
    );
    return { error };
  }
};
