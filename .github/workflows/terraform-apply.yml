name: Terraform Apply

on: workflow_dispatch

env:
  TF_VERSION: 0.15.3

jobs:
  terraform:
    runs-on: ubuntu-18.04
    timeout-minutes: 30
    env:
      API_URL: ${{ secrets.WEBAPP_API_URL }}
    steps:
      - uses: hmarr/debug-action@v2
      - uses: actions/checkout@v2

      - name: Check if Action Runs Already
        id: action
        run: |
          workflow=$(echo "${{ github.event.workflow }}" | cut -d/ -f3)
          runs=$(curl -H "Accept: application/vnd.github.groot-preview+json" "https://api.github.com/repos/${{github.repository}}/actions/workflows/$workflow/runs?status=in_progress")
          count=$(jq ".total_count" <<< "$runs")
          echo "$count"
          echo "::set-output name=count::$count"

      - name: Wake Up API
        if: steps.action.outputs.count == '1'
        uses: fjogeleit/http-request-action@master
        with:
          url: "${{ env.API_URL }}/heartbeat"
          method: "GET"
          customHeaders: '{"Authorization": "${{ secrets.GH_SECRET }}"}'
          timeout: "60000"
        continue-on-error: true

      - name: Fetch Requests Count
        if: steps.action.outputs.count == '1'
        id: requests
        uses: fjogeleit/http-request-action@master
        with:
          url: "${{ env.API_URL }}/batch/items"
          method: "GET"
          customHeaders: '{"Authorization": "${{ secrets.GH_SECRET }}"}'
          timeout: "60000"

      - name: Get Requests Count
        if: steps.action.outputs.count == '1'
        id: count
        run: |
          count=$(jq length <<< ${{ steps.requests.outputs.response }})
          echo "$count"
          echo "::set-output name=count::$count"

      - name: Setup Terraform
        if: steps.action.outputs.count == '1' && steps.count.outputs.count != '0'
        uses: hashicorp/setup-terraform@v1
        with:
          terraform_version: ${{ env.TF_VERSION }}
          cli_config_credentials_token: ${{ secrets.TFC_TEAM_TOKEN }}

      - name: Terraform Format
        if: steps.action.outputs.count == '1' && steps.count.outputs.count != '0'
        id: fmt
        run: terraform fmt -check
        working-directory: ./terraform

      - name: Terraform Variables
        if: steps.action.outputs.count == '1' && steps.count.outputs.count != '0'
        run: |
          cat >"versions.tf" <<EOF
          terraform {
            backend "remote" {
              hostname     = "app.terraform.io"
              organization = "bcgov"
              workspaces {
                name = "${{ secrets.TFC_WORKSPACE }}"
              }
            }
          }
          EOF

          cat >"ci.auto.tfvars" <<EOF
          dev_keycloak_url="${{ secrets.KEYCLOAK_DEV_URL }}"
          test_keycloak_url="${{ secrets.KEYCLOAK_TEST_URL }}"
          prod_keycloak_url="${{ secrets.KEYCLOAK_PROD_URL }}"
          dev_client_secret="${{ secrets.KEYCLOAK_DEV_CLIENT_SECRET }}"
          test_client_secret="${{ secrets.KEYCLOAK_TEST_CLIENT_SECRET }}"
          prod_client_secret="${{ secrets.KEYCLOAK_PROD_CLIENT_SECRET }}"
          EOF
        working-directory: ./terraform

      - name: Terraform Init
        if: steps.action.outputs.count == '1' && steps.count.outputs.count != '0'
        id: init
        run: terraform init
        working-directory: ./terraform

      # NPM PACKAGES
      - uses: actions/cache@v2
        with:
          path: |
            **/node_modules
          key: ${{ runner.os }}-modules-${{ hashFiles('**/yarn.lock') }}
      - name: Install Yarn dependencies in root
        run: yarn

      - name: Terraform Apply
        if: steps.action.outputs.count == '1' && steps.count.outputs.count != '0'
        id: apply
        run: |
          terraform apply -auto-approve
        working-directory: ./terraform
        continue-on-error: true

      - name: Update Requests Status
        if: steps.action.outputs.count == '1' && steps.count.outputs.count != '0'
        uses: fjogeleit/http-request-action@master
        with:
          url: "${{ env.API_URL }}/batch/items"
          method: "PUT"
          data: '{"ids": ${{ steps.requests.outputs.response }}, "success": "${{ steps.apply.outcome != ''failure'' }}"}'
          customHeaders: '{"Authorization": "${{ secrets.GH_SECRET }}"}'
          timeout: "60000"
