name: "Terraform V2 Apply"

on:
  push:
    branches:
      - main
    paths:
      - "terraform-v2/**"
      - ".github/workflows/terraform-v2-apply.yml"

env:
  TF_VERSION: 1.0.7
  TFC_WORKSPACE: xgr00q-prod-keycloak-v2
  KEYCLOAK_V2_DEV_URL: https://dev.loginproxy.gov.bc.ca
  KEYCLOAK_V2_TEST_URL: https://test.loginproxy.gov.bc.ca
  KEYCLOAK_V2_PROD_URL: https://loginproxy.gov.bc.ca

jobs:
  terraform:
    runs-on: ubuntu-18.04
    timeout-minutes: 30
    env:
      API_URL: ${{secrets.WEBAPP_API_URL}}
    steps:
      - uses: hmarr/debug-action@v2
      - name: Checkout
        uses: actions/checkout@v2

      - name: Wake Up API
        uses: fjogeleit/http-request-action@master
        with:
          url: "${{env.API_URL}}"
          method: "GET"
          customHeaders: '{"Authorization": "${{secrets.GH_SECRET}}"}'
        continue-on-error: true

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1
        with:
          terraform_version: ${{ env.TF_VERSION }}
          cli_config_credentials_token: ${{ secrets.TFC_TEAM_TOKEN }}

      - name: Terraform Format
        id: fmt
        run: terraform fmt -check
        working-directory: ./terraform-v2

      - name: Terraform Variables
        run: |
          cat >"versions.tf" <<EOF
          terraform {
            backend "remote" {
              hostname     = "app.terraform.io"
              organization = "bcgov"
              workspaces {
                name = "${{ env.TFC_WORKSPACE }}"
              }
            }
          }
          EOF

          cat >"ci.auto.tfvars" <<EOF
          dev_keycloak_url="${{ env.KEYCLOAK_V2_DEV_URL }}"
          test_keycloak_url="${{ env.KEYCLOAK_V2_TEST_URL }}"
          prod_keycloak_url="${{ env.KEYCLOAK_V2_PROD_URL }}"
          dev_client_secret="${{ secrets.KEYCLOAK_V2_DEV_CLIENT_SECRET }}"
          test_client_secret="${{ secrets.KEYCLOAK_V2_TEST_CLIENT_SECRET }}"
          prod_client_secret="${{ secrets.KEYCLOAK_V2_PROD_CLIENT_SECRET }}"
          EOF
        working-directory: ./terraform-v2

      - name: Terraform Init
        id: init
        run: terraform init -upgrade
        working-directory: ./terraform-v2

      # NPM PACKAGES
      - uses: actions/cache@v2
        with:
          path: |
            **/node_modules
          key: ${{ runner.os }}-modules-${{ hashFiles('**/yarn.lock') }}
      - name: Install Yarn dependencies in root
        run: yarn

      - name: Terraform Apply
        id: apply
        if: github.ref == 'refs/heads/main'
        run: |
          until terraform apply -auto-approve || false;
          do echo retrying in 30 seconds...
          sleep 30
          done
        working-directory: ./terraform-v2
        continue-on-error: true

      - name: Get PR Number
        id: prNumber
        run: |
          pr=$(curl -H "Accept: application/vnd.github.groot-preview+json" https://api.github.com/repos/${{github.repository}}/commits/${{github.sha}}/pulls)
          number=$(jq ".[0].number" <<< "$pr")
          fullLabels=$(jq ".[0].labels" <<< "$pr")
          botLabel=$(jq -c '.[] | select(.name | contains("auto_generated")).name' <<< "$fullLabels")
          echo "::set-output name=number::$number"
          echo "::set-output name=botLabel::$botLabel"

      - name: Update Apply Status
        uses: fjogeleit/http-request-action@master
        if: steps.prNumber.outputs.botLabel == '"auto_generated"'
        with:
          url: "${{env.API_URL}}?status=apply"
          method: "PUT"
          data: '{"prNumber": ${{ steps.prNumber.outputs.number }}, "applySuccess": "${{steps.apply.outcome != ''failure''}}"}'
          customHeaders: '{"Authorization": "${{secrets.GH_SECRET}}"}'
          timeout: "60000"

      - name: Fail action if apply failed
        if: steps.apply.outcome == 'failure'
        run: exit 1
